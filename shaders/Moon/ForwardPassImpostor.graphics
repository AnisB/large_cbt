// Initial include
#include "shader_lib/common.hlsl"

// CBVs
#define GLOBAL_CB_BINDING_SLOT CBV_SLOT(0)
#define PLANET_CB_BINDING_SLOT CBV_SLOT(1)
#define DEFORMATION_CB_BINDING_SLOT CBV_SLOT(2)

// SRVs
#define ALBEDO_TEXTURE_SLOT SRV_SLOT(0)
#define SURFACE_GRADIENT_TEXTURE_SLOT SRV_SLOT(1)

// Samplers
#define SAMPLER_LINEAR_WRAP_BINDING_SLOT SPL_SLOT(0)

// Other includes
#include "shader_lib/constant_buffers.hlsl"
#include "shader_lib/oren_nayar.hlsl"
#define SKY_NOT_SUPPORTED
#include "shader_lib/lighting_evaluation.hlsl"

// SRVs
Texture2D<float4> _AbledoTexture: register(ALBEDO_TEXTURE_SLOT);
Texture2D<float4> _ElevationSGTexture: register(SURFACE_GRADIENT_TEXTURE_SLOT);

// Samplers
SamplerState sampler_linear_wrap : register(SAMPLER_LINEAR_WRAP_BINDING_SLOT);

struct VertexInput
{
    uint instanceID : SV_InstanceID;
    uint vertexID : SV_VertexID;
};

struct VertexOutput
{
    float4 positionCS : SV_POSITION;
};

VertexOutput vert(VertexInput input)
{
    VertexOutput output;
    float2 uv = float2((input.vertexID << 1) & 2, input.vertexID & 2);
    output.positionCS = float4(uv * 2.0 - 1.0, 1.0, 1.0);
    return output;
}

struct PixelInput
{
    float4 positionCS : SV_POSITION;
};

float4 frag(PixelInput input) : SV_Target0
{
    // Compute the virtual position of the pixel
    float3 rayDirection = get_ray_direction(input.positionCS.xy * _ScreenSize.zw, _InvViewProjectionMatrix);

    // Intersect with the planet
    float planetIntersection = ray_sphere_intersect_nearest((float3)_CameraPosition, rayDirection, _PlanetCenter, _PlanetRadius);
    
    // This thread doesn't intersect the planet, we're done
    if (planetIntersection == -1.0)
        discard;

    // Evaluate the distance to camera
    REAL3_DP positionWS = _CameraPosition + rayDirection * planetIntersection;
    REAL3_DP positionPS = positionWS - _PlanetCenter;

    // Data required for the lighting
    BSDFData bsdfData = (BSDFData)0;

    // View vector
    bsdfData.viewWS = -rayDirection;
    bsdfData.normalWS = normalize((float3)positionPS);
    bsdfData.roughness = 0.8f;
    float NdotV = dot(bsdfData.viewWS, bsdfData.normalWS);

    // Normalized placed space
    REAL3_DP posNPS = positionPS / _PlanetRadius;

    // Simple diffuse color for now
    REAL2_DP lonlat = normalized_coordinates_to_longlat(posNPS);
    bsdfData.diffuseColor = _AbledoTexture.Sample(sampler_linear_wrap, float2(lonlat)).xyz;

    // Elevation normal
    float3 sg = _ElevationSGTexture.Sample(sampler_linear_wrap, float2(lonlat)).xyz;
    bsdfData.normalWS = normalize(bsdfData.normalWS - sg);

    // Evaluate the light color
    const float3 lightColor = float3(1.0, 1.0, 1.0);

    // Lighting accumulation
    float3 lighting = EvaluateDirectLighting(bsdfData, NdotV, _SunDirection, lightColor);
    
    // Output the planet lighting
    return float4(lighting, 1.0);
}
